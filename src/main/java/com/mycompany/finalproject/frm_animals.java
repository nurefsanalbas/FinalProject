/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.finalproject;

import static com.mycompany.finalproject.frm_login.password;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nurefsanalbas
 */
public class frm_animals extends javax.swing.JFrame {

    DefaultTableModel tbl_animalsModel;
    int id;
    String genus;
    String animalClass;
    String gender;
    String habitat;
    String name;
    String laborant;
    boolean vertebrate;
    String species;
    byte[] image;
    String fileName = null;
    byte[] personImage = null;

    int column = 0;

    public frm_animals() {
        initComponents();

        tbl_animalsModel = new DefaultTableModel();
        tbl_animalsModel.setColumnIdentifiers(new Object[]{"ID", "NAME", "ANIMALCLASS", "GENUS", "SPECIES", "VERTEBRATE", "GENDER", "HABITAT", "LABORANT"});
        getAnimals();
        tbl_animals.setModel(tbl_animalsModel);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        pop_up = new javax.swing.JPopupMenu();
        mitem_open = new javax.swing.JMenuItem();
        mitem_close = new javax.swing.JMenuItem();
        seperator = new javax.swing.JPopupMenu.Separator();
        mitem_back = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnl_registration = new javax.swing.JPanel();
        lbl_heading = new javax.swing.JLabel();
        lbl_genus = new javax.swing.JLabel();
        txt_genus = new javax.swing.JTextField();
        lbl_id = new javax.swing.JLabel();
        spinner_id = new javax.swing.JSpinner();
        lbl_class = new javax.swing.JLabel();
        cbb_class = new javax.swing.JComboBox<>();
        rbtn_female = new javax.swing.JRadioButton();
        rbtn_male = new javax.swing.JRadioButton();
        btn_add = new javax.swing.JButton();
        lbl_habitat = new javax.swing.JLabel();
        txt_habitat = new javax.swing.JTextField();
        lbl_gender = new javax.swing.JLabel();
        btn_update = new javax.swing.JButton();
        txt_search = new javax.swing.JTextField();
        btn_search = new javax.swing.JButton();
        btn_deleteRow = new javax.swing.JButton();
        cb_vertebrate = new javax.swing.JCheckBox();
        lbl_name = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        lbl_laborantName = new javax.swing.JLabel();
        txt_laborantName = new javax.swing.JTextField();
        lbl_species = new javax.swing.JLabel();
        txt_species = new javax.swing.JTextField();
        pnl_table = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_animals = new javax.swing.JTable();
        lbl_image = new javax.swing.JLabel();
        btn_image = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        cbx_open = new javax.swing.JCheckBoxMenuItem();
        menu_close = new javax.swing.JMenu();
        cbx_close = new javax.swing.JCheckBoxMenuItem();

        mitem_open.setText("Open new Form");
        mitem_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitem_openActionPerformed(evt);
            }
        });
        pop_up.add(mitem_open);

        mitem_close.setText("Close");
        mitem_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitem_closeActionPerformed(evt);
            }
        });
        pop_up.add(mitem_close);
        pop_up.add(seperator);

        mitem_back.setText("Back to welcome page");
        mitem_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitem_backActionPerformed(evt);
            }
        });
        pop_up.add(mitem_back);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(879, 797));
        setSize(new java.awt.Dimension(879, 797));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane1.setDividerLocation(280);
        jSplitPane1.setDividerSize(20);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnl_registration.setBackground(new java.awt.Color(153, 153, 153));
        pnl_registration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnl_registrationMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pnl_registrationMouseReleased(evt);
            }
        });
        pnl_registration.setLayout(new java.awt.GridBagLayout());

        lbl_heading.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbl_heading.setText("NEW ANİMAL TYPE REGİSTRATİON");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 69, 0, 0);
        pnl_registration.add(lbl_heading, gridBagConstraints);

        lbl_genus.setText("Genus:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 157;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 14, 0, 0);
        pnl_registration.add(lbl_genus, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 157;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 110;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 0, 0);
        pnl_registration.add(txt_genus, gridBagConstraints);

        lbl_id.setText("ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(35, 13, 0, 0);
        pnl_registration.add(lbl_id, gridBagConstraints);

        spinner_id.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1000, 1));
        spinner_id.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 12, 0, 0);
        pnl_registration.add(spinner_id, gridBagConstraints);

        lbl_class.setText("Class:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 42;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 13, 0, 0);
        pnl_registration.add(lbl_class, gridBagConstraints);

        cbb_class.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fish", "Amphibia", "Reptilia", "Aves", "Mammalia", "Sponges", "Solenters", "Worms", "Arthropods", "Mollusks", "Echinoderms" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 64;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 12, 0, 0);
        pnl_registration.add(cbb_class, gridBagConstraints);

        buttonGroup1.add(rbtn_female);
        rbtn_female.setText("Female");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(31, 3, 0, 0);
        pnl_registration.add(rbtn_female, gridBagConstraints);

        buttonGroup1.add(rbtn_male);
        rbtn_male.setText("Male");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        pnl_registration.add(rbtn_male, gridBagConstraints);

        btn_add.setText("ADD");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 65;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.gridheight = 97;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 49, 60, 0);
        pnl_registration.add(btn_add, gridBagConstraints);

        lbl_habitat.setText("Habitat:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 42;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 42, 0, 0);
        pnl_registration.add(lbl_habitat, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 34;
        gridBagConstraints.ipadx = 74;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 12, 0, 0);
        pnl_registration.add(txt_habitat, gridBagConstraints);

        lbl_gender.setText("Gender");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(35, 45, 0, 0);
        pnl_registration.add(lbl_gender, gridBagConstraints);

        btn_update.setText("UPDATE");
        btn_update.setEnabled(false);
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 26;
        gridBagConstraints.gridy = 65;
        gridBagConstraints.gridwidth = 31;
        gridBagConstraints.gridheight = 96;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 6, 0, 0);
        pnl_registration.add(btn_update, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 36;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.gridwidth = 51;
        gridBagConstraints.gridheight = 12;
        gridBagConstraints.ipadx = 159;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        pnl_registration.add(txt_search, gridBagConstraints);

        btn_search.setText("SEARCH");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.gridheight = 22;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 49, 0, 0);
        pnl_registration.add(btn_search, gridBagConstraints);

        btn_deleteRow.setText("DELETE A ROW");
        btn_deleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteRowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 86;
        gridBagConstraints.gridy = 95;
        gridBagConstraints.gridwidth = 82;
        gridBagConstraints.gridheight = 65;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 19);
        pnl_registration.add(btn_deleteRow, gridBagConstraints);

        cb_vertebrate.setText("Is It Vertebrate?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 42, 0, 0);
        pnl_registration.add(cb_vertebrate, gridBagConstraints);

        lbl_name.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 13, 0, 0);
        pnl_registration.add(lbl_name, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 10;
        gridBagConstraints.ipadx = 89;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 12, 0, 0);
        pnl_registration.add(txt_name, gridBagConstraints);

        lbl_laborantName.setText("Laborant:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 21;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 49, 0, 0);
        pnl_registration.add(lbl_laborantName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 56;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 81;
        gridBagConstraints.gridheight = 8;
        gridBagConstraints.ipadx = 136;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(46, 6, 0, 0);
        pnl_registration.add(txt_laborantName, gridBagConstraints);

        lbl_species.setText("Species:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 157;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 41, 0, 0);
        pnl_registration.add(lbl_species, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 157;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 110;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 0, 0);
        pnl_registration.add(txt_species, gridBagConstraints);

        jSplitPane1.setTopComponent(pnl_registration);

        pnl_table.setBackground(new java.awt.Color(0, 153, 255));
        pnl_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnl_registrationMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pnl_registrationMouseReleased(evt);
            }
        });

        tbl_animals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbl_animals.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_animalsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_animals);

        lbl_image.setBackground(new java.awt.Color(255, 255, 255));

        btn_image.setText("CHOOSE");
        btn_image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_imageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_tableLayout = new javax.swing.GroupLayout(pnl_table);
        pnl_table.setLayout(pnl_tableLayout);
        pnl_tableLayout.setHorizontalGroup(
            pnl_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_tableLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnl_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_tableLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btn_image))
                    .addGroup(pnl_tableLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_image)))
                .addGap(0, 38, Short.MAX_VALUE))
        );
        pnl_tableLayout.setVerticalGroup(
            pnl_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_tableLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnl_tableLayout.createSequentialGroup()
                .addGap(255, 255, 255)
                .addComponent(lbl_image)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_image, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(pnl_table);

        getContentPane().add(jSplitPane1);

        jMenuBar1.setEnabled(false);

        menu_file.setText("File");

        cbx_open.setText("Open New Form");
        cbx_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_openActionPerformed(evt);
            }
        });
        menu_file.add(cbx_open);

        jMenuBar1.add(menu_file);

        menu_close.setText("Close");

        cbx_close.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.META_DOWN_MASK));
        cbx_close.setText("Close Registration");
        cbx_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_closeActionPerformed(evt);
            }
        });
        menu_close.add(cbx_close);

        jMenuBar1.add(menu_close);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        txt_laborantName.setText(frm_login.user);
    }//GEN-LAST:event_formWindowOpened

    private void btn_imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_imageActionPerformed
        //        JFileChooser fileChooser = new JFileChooser();
        //        fileChooser.showOpenDialog(null);
        //        File f = fileChooser.getSelectedFile();
        //        fileName = f.getAbsolutePath();
        //
        //        ImageIcon imageIcon = new ImageIcon(new ImageIcon(fileName).getImage().getScaledInstance(lbl_image.getWidth(), lbl_image.getHeight(), Image.SCALE_SMOOTH));
        //
        //        lbl_image.setIcon(imageIcon);
        //
        //        try {
        //            File image = new File(fileName);
        //            FileInputStream fis = new FileInputStream(image);
        //            ByteArrayOutputStream baos = new ByteArrayOutputStream();
        //            byte[] buf = new byte[1024];
        //            for (int readNum; (readNum = fis.read(buf)) != -1;) {
        //                baos.write(buf, 0, readNum);
        //            }
        //            personImage = baos.toByteArray();
        //        } catch (Exception ex) {
        //            JOptionPane.showMessageDialog(null, ex);
        //
        //        }
    }//GEN-LAST:event_btn_imageActionPerformed

    private void tbl_animalsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_animalsMouseClicked
        if (SwingUtilities.isRightMouseButton(evt)) {
            if (tbl_animals.getSelectedRow() > -1) {
                int row = tbl_animals.getSelectedRow();
                int id = (int) tbl_animalsModel.getValueAt(row, 0);

                GetDataWihtId(id);
                btn_update.setEnabled(true);
            }
        }
    }//GEN-LAST:event_tbl_animalsMouseClicked

    private void btn_deleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteRowActionPerformed
        int row = tbl_animals.getSelectedRow();
        int id = (int) tbl_animals.getValueAt(row, column);
        Delete(id);
        getAnimals();
    }//GEN-LAST:event_btn_deleteRowActionPerformed

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed

        Search(txt_search.getText());
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        Update();
        btn_update.setEnabled(false);
        getAnimals();

    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        id = (int) spinner_id.getValue();
        name = txt_name.getText();
        animalClass = cbb_class.getSelectedItem().toString();
        genus = txt_genus.getText();
        species = txt_species.getText();
        if (cb_vertebrate.isSelected()) {
            vertebrate = true;
        } else {
            vertebrate = false;
        }

        if (rbtn_female.isSelected()) {
            gender = "Female";
        } else {
            gender = "Male";
        }
        habitat = txt_habitat.getText();

        laborant = txt_laborantName.getText();

        insertAnimal(id, name, animalClass, genus, species, vertebrate, gender, habitat, laborant);
        getAnimals();
    }//GEN-LAST:event_btn_addActionPerformed

    private void cbx_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_openActionPerformed
        frm_animals frm = new frm_animals();
        frm.setLocationRelativeTo(null);
        frm.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_cbx_openActionPerformed

    private void cbx_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_closeActionPerformed

        int value = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to close?", "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (value == JOptionPane.YES_OPTION) {

            this.dispose();
        } else {
            this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

        }

    }//GEN-LAST:event_cbx_closeActionPerformed

    private void pnl_registrationMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_registrationMousePressed
        if (SwingUtilities.isRightMouseButton(evt)) {
            showPopUp(evt);
        }
    }//GEN-LAST:event_pnl_registrationMousePressed

    private void pnl_registrationMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_registrationMouseReleased
        if (SwingUtilities.isRightMouseButton(evt)) {
            showPopUp(evt);
        }
    }//GEN-LAST:event_pnl_registrationMouseReleased

    private void mitem_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitem_openActionPerformed
        frm_animals frm = new frm_animals();
        frm.setLocationRelativeTo(null);
        frm.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_mitem_openActionPerformed

    private void mitem_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitem_closeActionPerformed
        int value = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to close?", "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (value == JOptionPane.YES_OPTION) {

            this.dispose();
        } else {
            this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

        }
    }//GEN-LAST:event_mitem_closeActionPerformed

    private void mitem_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitem_backActionPerformed
        frm_welcome frm = new frm_welcome();
        frm.setLocationRelativeTo(null);
        frm.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_mitem_backActionPerformed

    public boolean Search(String text) {
        tbl_animalsModel.setRowCount(0);//tabloyu sıfırlar.
        boolean rvalue = false;
        Connection conn = null;

        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/ANIMALS", "APP", "as");
            Statement stmt = conn.createStatement();
            String query = "SELECT * FROM TBL_ANIMALS WHERE NAME LIKE '%" + text + "%'";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {

                id = rs.getInt("ID");
                name = rs.getString("NAME");
                animalClass = rs.getString("ANIMALCLASS");
                genus = rs.getString("GENUS");
                species = rs.getString("SPECIES");
                vertebrate = rs.getBoolean("VERTEBRATE");
                gender = rs.getString("GENDER");
                habitat = rs.getString("HABITAT");
                laborant = rs.getString("LABORANT");

                tbl_animalsModel.addRow(new Object[]{id, name, animalClass, genus, species, vertebrate, gender, habitat, laborant});
            }

            conn.close();
            rvalue = true;

        } catch (SQLException ex) {
            Logger.getLogger(frm_animals.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (conn != null && !(conn.isClosed())) {
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(frm_animals.class.getName()).log(Level.SEVERE, null, ex);

        }
        return rvalue;

    }

    public boolean Delete(int id) {

        tbl_animalsModel.setRowCount(0);
        boolean rvalue = false;
        Connection conn = null;

        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/ANIMALS", "APP", "as");
            Statement stmt = conn.createStatement();
            String query = "DELETE FROM TBL_ANIMALS WHERE ID=" + id;
            stmt.executeUpdate(query);

            conn.close();
            rvalue = true;

        } catch (SQLException ex) {
            Logger.getLogger(frm_animals.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (conn != null && !(conn.isClosed())) {
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(frm_animals.class.getName()).log(Level.SEVERE, null, ex);

        }
        return rvalue;
    }

    public boolean insertAnimal(int id, String name, String animalClass, String genus, String species, Boolean verberate, String gender, String habitat, String laborant) {

        boolean rvalue = false;
        Connection conn = null;
        try {

            Statement stmt = null;
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/ANIMALS", "APP", "as");
            stmt = conn.createStatement();

            String query = "INSERT INTO TBL_ANIMALS VALUES(" + id + ",'" + name + "','" + animalClass + "','" + genus + "','" + species + "'," + verberate + ",'" + gender + "','" + habitat + "','" + laborant + "')";

            stmt.executeUpdate(query);

            conn.close();
            rvalue = true;
        } catch (SQLException ex) {
            Logger.getLogger(frm_animals.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (conn != null && !(conn.isClosed())) {
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(frm_animals.class.getName()).log(Level.SEVERE, null, ex);

        }
        return rvalue;

    }

    public boolean getAnimals() {
        tbl_animalsModel.setRowCount(0);
        boolean rvalue = false;
        Connection conn = null;

        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/ANIMALS", "APP", "as");
            Statement stmt = conn.createStatement();
            String query = "SELECT * FROM TBL_ANIMALS ORDER BY ID DESC";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {

                id = rs.getInt("ID");
                name = rs.getString("NAME");
                animalClass = rs.getString("ANIMALCLASS");
                genus = rs.getString("GENUS");
                species = rs.getString("SPECIES");
                vertebrate = rs.getBoolean("VERTEBRATE");
                gender = rs.getString("GENDER");
                habitat = rs.getString("HABITAT");
                laborant = rs.getString("LABORANT");

                tbl_animalsModel.addRow(new Object[]{id, name, animalClass, genus, species, vertebrate, gender, habitat, laborant});

            }

            conn.close();
            rvalue = true;

        } catch (SQLException ex) {
            Logger.getLogger(frm_animals.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (conn != null && !(conn.isClosed())) {
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(frm_animals.class.getName()).log(Level.SEVERE, null, ex);

        }
        return rvalue;
    }

    public void Update() {
        try {
            id = (int) spinner_id.getValue();
            name = txt_name.getText();
            animalClass = cbb_class.getSelectedItem().toString();
            genus = txt_genus.getText();
            species = txt_species.getText();
            if (cb_vertebrate.isSelected()) {
                vertebrate = true;
            } else {
                vertebrate = false;
            }

            if (rbtn_female.isSelected()) {
                gender = "female";
            } else {
                gender = "male";
            }
            habitat = txt_habitat.getText();

            laborant = txt_laborantName.getText();

            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/ANIMALS", "APP", "as");
            Statement stmt = conn.createStatement();
            String query = "UPDATE TBL_ANIMALS SET NAME='" + name + "', GENDER='" + gender
                    + "', ANIMALCLASS='" + animalClass + "', GENUS='" + genus + "', SPECIES='" + species + "', VERTEBRATE="
                    + vertebrate + ",HABITAT='" + habitat + "',LABORANT='" + laborant + "'WHERE id=" + id;
            stmt.executeUpdate(query);
            conn.close();

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

    public void GetDataWihtId(int id) {

        tbl_animalsModel.setRowCount(0);
        try {

            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/ANIMALS", "APP", "as");
            Statement stmt = conn.createStatement();
            String query = "SELECT * FROM TBL_ANIMALS WHERE id=" + id;
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {

                name = rs.getString("NAME");
                animalClass = rs.getString("ANIMALCLASS");
                genus = rs.getString("GENUS");
                species = rs.getString("SPECIES");
                vertebrate = rs.getBoolean("VERTEBRATE");
                gender = rs.getString("GENDER");
                habitat = rs.getString("HABITAT");
                laborant = rs.getString("LABORANT");

                spinner_id.setValue(id);
                txt_name.setText(name);
                txt_genus.setText(genus);
                txt_habitat.setText(habitat);
                txt_laborantName.setText(laborant);
                txt_species.setText(species);

                if (rbtn_female.isSelected()) {
                    gender = "Female";

                } else {
                    gender = "Male";

                }

                if (vertebrate == false) {
                    cb_vertebrate.setEnabled(false);
                } else {
                    cb_vertebrate.setEnabled(true);
                }
                switch (animalClass) {

                    case "Fish":
                        cbb_class.setSelectedIndex(0);
                        break;
                    case "Amphibia":
                        cbb_class.setSelectedIndex(1);
                        break;
                    case "Reptilia":
                        cbb_class.setSelectedIndex(2);
                        break;
                    case "Aves":
                        cbb_class.setSelectedIndex(3);
                        break;
                    case "Mammalia":
                        cbb_class.setSelectedIndex(4);
                        break;
                    case "Sponges":
                        cbb_class.setSelectedIndex(5);
                        break;
                    case "Solenters":
                        cbb_class.setSelectedIndex(6);
                        break;
                    case "Worms":
                        cbb_class.setSelectedIndex(7);
                        break;
                    case "Arthropods":
                        cbb_class.setSelectedIndex(8);
                        break;
                    case "Mollusks":
                        cbb_class.setSelectedIndex(9);
                        break;
                    case "Echinoderms":
                        cbb_class.setSelectedIndex(10);
                        break;

                }

            }
            conn.close();

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    private void showPopUp(MouseEvent evt) {

        if (evt.isPopupTrigger()) {
            pop_up.show(evt.getComponent(), evt.getX(), evt.getY());
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_animals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_animals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_animals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_animals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_animals().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_deleteRow;
    private javax.swing.JButton btn_image;
    private javax.swing.JButton btn_search;
    private javax.swing.JButton btn_update;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cb_vertebrate;
    private javax.swing.JComboBox<String> cbb_class;
    private javax.swing.JCheckBoxMenuItem cbx_close;
    private javax.swing.JCheckBoxMenuItem cbx_open;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lbl_class;
    private javax.swing.JLabel lbl_gender;
    private javax.swing.JLabel lbl_genus;
    private javax.swing.JLabel lbl_habitat;
    private javax.swing.JLabel lbl_heading;
    private javax.swing.JLabel lbl_id;
    private javax.swing.JLabel lbl_image;
    private javax.swing.JLabel lbl_laborantName;
    private javax.swing.JLabel lbl_name;
    private javax.swing.JLabel lbl_species;
    private javax.swing.JMenu menu_close;
    private javax.swing.JMenu menu_file;
    private javax.swing.JMenuItem mitem_back;
    private javax.swing.JMenuItem mitem_close;
    private javax.swing.JMenuItem mitem_open;
    private javax.swing.JPanel pnl_registration;
    private javax.swing.JPanel pnl_table;
    private javax.swing.JPopupMenu pop_up;
    private javax.swing.JRadioButton rbtn_female;
    private javax.swing.JRadioButton rbtn_male;
    private javax.swing.JPopupMenu.Separator seperator;
    private javax.swing.JSpinner spinner_id;
    private javax.swing.JTable tbl_animals;
    private javax.swing.JTextField txt_genus;
    private javax.swing.JTextField txt_habitat;
    private javax.swing.JTextField txt_laborantName;
    private javax.swing.JTextField txt_name;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField txt_species;
    // End of variables declaration//GEN-END:variables
}
